AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

#テンプレートの説明
Description: |
  apigateway-lambda-sample

#共通パラメータ
Globals:
  Function:
    Runtime: python3.9
    MemorySize: 512
    Timeout: 10
    Tracing: Active
  Api:
    TracingEnabled: true

#リソースの説明
Resources:
  LambdaDataSource:
    Type: 'AWS::AppSync::DataSource'
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: 'LambdaDataSource'
      Type: 'AWS_LAMBDA'
      LambdaConfig:
        LambdaFunctionArn: !GetAtt LambdaFunction.Arn

  PipelineResolver:
    Type: 'AWS::AppSync::Resolver'
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt LambdaDataSource.Name
      FieldName: 'pipelineResolver'
      Kind: 'PIPELINE'
      PipelineConfig:
        Functions:
          - !GetAtt LambdaFunction.Arn
          - !Ref AnotherResolver # 別のリゾルバを指定

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'MyPipelineLambda'
      Handler: 'index.handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: 'your-code-bucket'
        S3Key: 'lambda-code.zip'

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'LambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  AppSyncApi:
    Type: 'AWS::AppSync::GraphQLApi'
    Properties:
      Name: 'MyAppSyncApi'
      AuthenticationType: 'API_KEY'

  AnotherResolver:
    Type: 'AWS::AppSync::Resolver'
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: 'Query'
      FieldName: 'anotherResolver'
      DataSourceName: 'AnotherDataSource'
      RequestMappingTemplate: '{ "version": "2018-05-29", "payload": {} }'
      ResponseMappingTemplate: '$util.toJson($ctx.result)'

  AnotherDataSource:
    Type: 'AWS::AppSync::DataSource'
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: 'AnotherDataSource'
      Type: 'NONE' # 他のデータソースとの結合などを想定
